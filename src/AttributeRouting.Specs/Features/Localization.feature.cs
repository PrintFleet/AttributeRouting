// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Localization")]
    public partial class LocalizationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Localization.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Localization", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Using the translations feature requires a configured translation provider")]
        public virtual void UsingTheTranslationsFeatureRequiresAConfiguredTranslationProvider()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using the translations feature requires a configured translation provider", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("I generate the routes defined in the subject controllers");
#line 5
  testRunner.When("I fetch the routes for the Localization controller\'s Index action");
#line 6
  testRunner.Then("the route has no constraint with the key \"currentUICultureName\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes(string controller, string action, string nth, string translationKeyName, string translationKeyValue)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set the translation keys for the translatable properties of routing attributes", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have a new configuration object");
#line 10
   testRunner.And("I add the routes from the subject controllers");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value",
                        "cultureName"});
            table1.AddRow(new string[] {
                        "Localization_Index_RouteUrl",
                        "Index",
                        "en"});
#line 11
   testRunner.And("I configure a new TestTranslationProvider with:", ((string)(null)), table1);
#line 14
   testRunner.And("I generate the routes with this configuration");
#line 15
  testRunner.When(string.Format("I fetch the routes for the {0} controller\'s {1} action", controller, action));
#line 16
  testRunner.Then(string.Format("the {0} route\'s data token for \"{1}\" is \"{2}\"", nth, translationKeyName, translationKeyValue));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the translation keys for the translatable properties of routing attributes")]
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes_Variant0()
        {
            this.SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes("Localization", "Index", "1st", "RouteUrlTranslationKey", "Localization_Index_1_RouteUrl");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the translation keys for the translatable properties of routing attributes")]
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes_Variant1()
        {
            this.SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes("Localization", "Index", "2nd", "RouteUrlTranslationKey", "Localization_Index_2_RouteUrl");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the translation keys for the translatable properties of routing attributes")]
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes_Variant2()
        {
            this.SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes("Localization", "ExplicitTranslationKey", "1st", "RouteUrlTranslationKey", "Localization_Explicit_RouteUrl");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the translation keys for the translatable properties of routing attributes")]
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes_Variant3()
        {
            this.SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes("AreaLocalization", "Index", "1st", "AreaUrlTranslationKey", "AreaLocalization_AreaUrl");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the translation keys for the translatable properties of routing attributes")]
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes_Variant4()
        {
            this.SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes("AreaLocalizationExplicitKey", "Index", "1st", "AreaUrlTranslationKey", "Explicit_AreaUrl");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the translation keys for the translatable properties of routing attributes")]
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes_Variant5()
        {
            this.SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes("PrefixLocalization", "Index", "1st", "RoutePrefixUrlTranslationKey", "PrefixLocalization_RoutePrefixUrl");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the translation keys for the translatable properties of routing attributes")]
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes_Variant6()
        {
            this.SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes("PrefixLocalizationExplicitKey", "Index", "1st", "RoutePrefixUrlTranslationKey", "Explicit_RoutePrefixUrl");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the translation keys for the translatable properties of routing attributes")]
        public virtual void SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes_Variant7()
        {
            this.SetTheTranslationKeysForTheTranslatablePropertiesOfRoutingAttributes("PrefixedAreaLocalization", "Index", "1st", "RoutePrefixUrlTranslationKey", "Area_PrefixedAreaLocalization_RoutePrefixUrl");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register translated routes")]
        public virtual void RegisterTranslatedRoutes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register translated routes", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("I have a new configuration object");
#line 31
   testRunner.And("I add the routes from the Localization controller");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value",
                        "cultureName"});
            table2.AddRow(new string[] {
                        "Localization_Index_RouteUrl",
                        "Index",
                        "en"});
#line 32
   testRunner.And("I configure a new TestTranslationProvider with:", ((string)(null)), table2);
#line 35
   testRunner.And("I generate the routes with this configuration");
#line 36
  testRunner.When("I fetch the routes for the Localization controller\'s Index action");
#line 37
  testRunner.Then("2 routes are found");
#line 38
   testRunner.And("each route has a constraint with the key \"currentUICultureName\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ConstrainOutboundRouteGenerationByTheCurrentUICulture(string cultureName, string url)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constrain outbound route generation by the current UI culture", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("I have a new configuration object");
#line 42
   testRunner.And("I add the routes from the Localization controller");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value",
                        "cultureName"});
            table3.AddRow(new string[] {
                        "Localization_Index_1_RouteUrl",
                        "Index",
                        "en"});
            table3.AddRow(new string[] {
                        "Localization_Index_1_RouteUrl",
                        "Indice",
                        "es"});
            table3.AddRow(new string[] {
                        "Localization_Index_2_RouteUrl",
                        "Index2",
                        "en"});
            table3.AddRow(new string[] {
                        "Localization_Index_2_RouteUrl",
                        "Indice2",
                        "es"});
#line 43
   testRunner.And("I configure a new TestTranslationProvider with:", ((string)(null)), table3);
#line 49
   testRunner.And("I generate the routes with this configuration");
#line 50
   testRunner.And(string.Format("I set the current thread\'s CurrentUICulture to \"{0}\"", cultureName));
#line 51
  testRunner.When("I generate the url for the Localization controller\'s Index action");
#line 52
  testRunner.Then(string.Format("the generated url is \"/{0}\"", url));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constrain outbound route generation by the current UI culture")]
        public virtual void ConstrainOutboundRouteGenerationByTheCurrentUICulture_En_US()
        {
            this.ConstrainOutboundRouteGenerationByTheCurrentUICulture("en-US", "Index");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constrain outbound route generation by the current UI culture")]
        public virtual void ConstrainOutboundRouteGenerationByTheCurrentUICulture_En()
        {
            this.ConstrainOutboundRouteGenerationByTheCurrentUICulture("en", "Index");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constrain outbound route generation by the current UI culture")]
        public virtual void ConstrainOutboundRouteGenerationByTheCurrentUICulture_Fr_FR()
        {
            this.ConstrainOutboundRouteGenerationByTheCurrentUICulture("fr-FR", "Index");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constrain outbound route generation by the current UI culture")]
        public virtual void ConstrainOutboundRouteGenerationByTheCurrentUICulture_Fr()
        {
            this.ConstrainOutboundRouteGenerationByTheCurrentUICulture("fr", "Index");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constrain outbound route generation by the current UI culture")]
        public virtual void ConstrainOutboundRouteGenerationByTheCurrentUICulture_Es_ES()
        {
            this.ConstrainOutboundRouteGenerationByTheCurrentUICulture("es-ES", "Indice");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constrain outbound route generation by the current UI culture")]
        public virtual void ConstrainOutboundRouteGenerationByTheCurrentUICulture_Es()
        {
            this.ConstrainOutboundRouteGenerationByTheCurrentUICulture("es", "Indice");
        }
    }
}
#endregion
