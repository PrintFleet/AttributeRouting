// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18010
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Route Conventions")]
    public partial class RouteConventionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RouteConventions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Route Conventions", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the RestfulRouteConvention")]
        [NUnit.Framework.TestCaseAttribute("Index", "GET", "RestfulRouteConvention", null)]
        [NUnit.Framework.TestCaseAttribute("New", "GET", "RestfulRouteConvention/New", null)]
        [NUnit.Framework.TestCaseAttribute("Create", "POST", "RestfulRouteConvention", null)]
        [NUnit.Framework.TestCaseAttribute("Show", "GET", "RestfulRouteConvention/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Edit", "GET", "RestfulRouteConvention/{id}/Edit", null)]
        [NUnit.Framework.TestCaseAttribute("Update", "PUT", "RestfulRouteConvention/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Delete", "GET", "RestfulRouteConvention/{id}/Delete", null)]
        [NUnit.Framework.TestCaseAttribute("Destroy", "DELETE", "RestfulRouteConvention/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Custom", "GET", "RestfulRouteConvention/Custom", null)]
        public virtual void GeneratingRoutesUsingTheRestfulRouteConvention(string action, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the RestfulRouteConvention", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("I have registered the routes for the RestfulRouteConventionController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When(string.Format("I fetch the routes for the RestfulRouteConvention controller\'s {0} action", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then(string.Format("the route url is \"{0}\"", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 7
 testRunner.And("the default for \"controller\" is \"RestfulRouteConvention\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And(string.Format("the default for \"action\" is \"{0}\"", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And(string.Format("the route for {0} is constrained to {1} requests", action, method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the RestfulRouteConvention on controllers with a RoutePre" +
            "fix attribute")]
        [NUnit.Framework.TestCaseAttribute("Index", "GET", "Prefix", null)]
        [NUnit.Framework.TestCaseAttribute("New", "GET", "Prefix/New", null)]
        [NUnit.Framework.TestCaseAttribute("Create", "POST", "Prefix", null)]
        [NUnit.Framework.TestCaseAttribute("Show", "GET", "Prefix/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Edit", "GET", "Prefix/{id}/Edit", null)]
        [NUnit.Framework.TestCaseAttribute("Update", "PUT", "Prefix/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Delete", "GET", "Prefix/{id}/Delete", null)]
        [NUnit.Framework.TestCaseAttribute("Destroy", "DELETE", "Prefix/{id}", null)]
        public virtual void GeneratingRoutesUsingTheRestfulRouteConventionOnControllersWithARoutePrefixAttribute(string action, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the RestfulRouteConvention on controllers with a RoutePre" +
                    "fix attribute", exampleTags);
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I have registered the routes for the RestfulRouteConventionPrefixController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.When(string.Format("I fetch the routes for the RestfulRouteConventionPrefix controller\'s {0} action", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then(string.Format("the route url is \"{0}\"", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("the default for \"controller\" is \"RestfulRouteConventionPrefix\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And(string.Format("the default for \"action\" is \"{0}\"", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And(string.Format("the route for {0} is constrained to {1} requests", action, method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the DefaultHttpRouteConvention")]
        [NUnit.Framework.TestCaseAttribute("GetAll", "GET", "DefaultHttpRouteConvention", null)]
        [NUnit.Framework.TestCaseAttribute("Get", "GET", "DefaultHttpRouteConvention/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Post", "POST", "DefaultHttpRouteConvention", null)]
        [NUnit.Framework.TestCaseAttribute("Put", "PUT", "DefaultHttpRouteConvention/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Delete", "DELETE", "DefaultHttpRouteConvention/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Custom", "GET", "DefaultHttpRouteConvention/Custom", null)]
        public virtual void GeneratingRoutesUsingTheDefaultHttpRouteConvention(string action, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the DefaultHttpRouteConvention", exampleTags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have registered the routes for the DefaultHttpRouteConventionController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.When(string.Format("I fetch the routes for the DefaultHttpRouteConvention controller\'s {0} action", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then(string.Format("the route url is \"{0}\"", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.And("the default for \"controller\" is \"DefaultHttpRouteConvention\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And(string.Format("the default for \"action\" is \"{0}\"", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And(string.Format("the route for {0} is constrained to {1} requests", action, method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the DefaultHttpRouteConventionPrefix on controllers with " +
            "a RoutePrefix attribute")]
        [NUnit.Framework.TestCaseAttribute("GetAll", "GET", "Prefix", null)]
        [NUnit.Framework.TestCaseAttribute("Get", "GET", "Prefix/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Post", "POST", "Prefix", null)]
        [NUnit.Framework.TestCaseAttribute("Put", "PUT", "Prefix/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Delete", "DELETE", "Prefix/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("Custom", "GET", "Prefix/Custom", null)]
        public virtual void GeneratingRoutesUsingTheDefaultHttpRouteConventionPrefixOnControllersWithARoutePrefixAttribute(string action, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the DefaultHttpRouteConventionPrefix on controllers with " +
                    "a RoutePrefix attribute", exampleTags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have registered the routes for the DefaultHttpRouteConventionPrefixController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.When(string.Format("I fetch the routes for the DefaultHttpRouteConventionPrefix controller\'s {0} acti" +
                        "on", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then(string.Format("the route url is \"{0}\"", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.And("the default for \"controller\" is \"DefaultHttpRouteConventionPrefix\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And(string.Format("the default for \"action\" is \"{0}\"", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And(string.Format("the route for {0} is constrained to {1} requests", action, method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the RestfulRouteConvention on actions with an explicit ro" +
            "ute defined")]
        public virtual void GeneratingRoutesUsingTheRestfulRouteConventionOnActionsWithAnExplicitRouteDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the RestfulRouteConvention on actions with an explicit ro" +
                    "ute defined", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("I have registered the routes for the RestfulRouteConventionWithExplicitRouteContr" +
                    "oller", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
 testRunner.When("I fetch the routes for the RestfulRouteConventionWithExplicitRoute controller\'s I" +
                    "ndex action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("the 1st route url is \"RestfulRouteConventionWithExplicitRoute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 80
 testRunner.And("the 2nd route url is \"Legacy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the RestfulRouteConvention on actions with an explicit or" +
            "dered route defined")]
        public virtual void GeneratingRoutesUsingTheRestfulRouteConventionOnActionsWithAnExplicitOrderedRouteDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the RestfulRouteConvention on actions with an explicit or" +
                    "dered route defined", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I have registered the routes for the RestfulRouteConventionWithExplicitOrderedRou" +
                    "teController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.When("I fetch the routes for the RestfulRouteConventionWithExplicitOrderedRoute control" +
                    "ler\'s Index action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then("the 1st route url is \"RestfulRouteConventionWithExplicitOrderedRoute/Primary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
 testRunner.And("the 2nd route url is \"RestfulRouteConventionWithExplicitOrderedRoute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the DefaultHttpRouteConvention on actions with an explici" +
            "t route defined")]
        public virtual void GeneratingRoutesUsingTheDefaultHttpRouteConventionOnActionsWithAnExplicitRouteDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the DefaultHttpRouteConvention on actions with an explici" +
                    "t route defined", ((string[])(null)));
#line 88
this.ScenarioSetup(scenarioInfo);
#line 89
 testRunner.Given("I have registered the routes for the DefaultHttpRouteConventionWithExplicitRouteC" +
                    "ontroller", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
 testRunner.When("I fetch the routes for the DefaultHttpRouteConventionWithExplicitRoute controller" +
                    "\'s Get action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("the 1st route url is \"DefaultHttpRouteConventionWithExplicitRoute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.And("the 2nd route url is \"Legacy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the DefaultHttpRouteConvention on actions with an explici" +
            "t ordered route defined")]
        public virtual void GeneratingRoutesUsingTheDefaultHttpRouteConventionOnActionsWithAnExplicitOrderedRouteDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the DefaultHttpRouteConvention on actions with an explici" +
                    "t ordered route defined", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("I have registered the routes for the DefaultHttpRouteConventionWithExplicitOrdere" +
                    "dRouteController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.When("I fetch the routes for the DefaultHttpRouteConventionWithExplicitOrderedRoute con" +
                    "troller\'s Get action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("the 1st route url is \"DefaultHttpRouteConventionWithExplicitOrderedRoute/Primary\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 98
 testRunner.And("the 2nd route url is \"DefaultHttpRouteConventionWithExplicitOrderedRoute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes using the conventions that define areas on controllers")]
        public virtual void GeneratingRoutesUsingTheConventionsThatDefineAreasOnControllers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes using the conventions that define areas on controllers", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
 testRunner.Given("I have registered the routes for the AreaRouteConventionController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
 testRunner.When("I fetch the routes for the AreaRouteConvention controller\'s Index action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then("the route url is \"Subjects/Index\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
 testRunner.And("the default for \"controller\" is \"AreaRouteConvention\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("the default for \"action\" is \"Index\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("the route area is \"Subjects\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
